{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Characters","value","label","EskillMultis","Diluc","Mona","Object","freeze","Atkslider","props","React","useState","atkvalue","setatkValue","Row","Col","md","Slider","progress","min","max","style","margin","onChange","calcThis","InputNumber","App","calcAtk","atk","setState","calcCD","cd","CD","calcCR","cr","CR","state","eSM","className","Grid","fluid","SelectPicker","preventOverflow","data","size","width","onSelect","class","this","gutter","Math","round","map","x","reduce","a","b","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2673ddf9.chunk.js","sourcesContent":["import React, { Component, useState } from \"react\";\nimport \"./App.css\";\n\nimport \"rsuite/dist/styles/rsuite-default.css\";\nimport {\n  Slider,\n  RangeSlider,\n  Grid,\n  Row,\n  Col,\n  Container,\n  Header,\n  Content,\n  InputNumber,\n  SelectPicker\n} from \"rsuite\";\nimport { objectTypeSpreadProperty } from \"@babel/types\";\n\nconst Characters = [\n  { value: \"Diluc\", label: \"Diluc1\" },\n  { value: \"Diluc2\", label: \"Diluc2\" }\n];\n\nconst EskillMultis = {\n  Diluc: [0.944, 0.976, 1.29],\n  Mona: [94.4, 97.6, 129]\n};\nObject.freeze(EskillMultis);\n\nconst skillMultis = {\n  Diluc: [0.897, 0.876, 0.988, 1.34],\n  Mona: [94.4, 97.6, 129]\n};\nObject.freeze(skillMultis);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { atk: 0, CR: 0, CD: 0, eSM: [] };\n  }\n\n  calcAtk = atk => {\n    this.setState({ atk: atk });\n  };\n\n  calcCD = cd => {\n    this.setState({ CD: cd * 0.01 + 1 });\n  };\n\n  calcCR = cr => {\n    this.setState({ CR: cr / 100 });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"App-header\"> Genshin Damage Calculator </h1>\n        <Grid fluid>\n          <Row>\n            <Col md={12}>\n              {\" \"}\n              <h2>Character Stats</h2>\n            </Col>\n            <Col md={12}>\n              <h2> Character Skill Multipliers</h2>\n              <SelectPicker\n                preventOverflow\n                data={Characters}\n                size=\"lg\"\n                style={{ width: 224 }}\n                onSelect={(value, eSM) => {\n                  this.setState({ eSM: EskillMultis[value] });\n                }}\n              />\n            </Col>\n          </Row>\n\n          <div class=\"Slider\">\n            <h3>Attack</h3>\n            <Atkslider value=\"atk\" max=\"9999\" calcThis={this.calcAtk} />\n          </div>\n          <div class=\"Slider\">\n            <h3>Crit Rate %</h3>\n            <Atkslider max=\"80\" calcThis={this.calcCR} />\n          </div>\n          <div class=\"Slider\">\n            <h3>Crit Dmg %</h3>\n            <Atkslider calcThis={this.calcCD} max=\"350\" />\n          </div>\n          <Row gutter={12}>\n            <Col md={8}>\n              <h3>Non-Crit Hit</h3>\n              <h4>{Math.round(this.state.atk)} </h4>\n            </Col>\n            <Col md={8}>\n              <h3>Critical Hit</h3>\n              <h4>{Math.round(this.state.atk * this.state.CD)} </h4>\n            </Col>\n            <Col md={8}>\n              <h3>Expected Damage</h3>\n              <h4>\n                {Math.round(\n                  (1 - this.state.CR) * this.state.atk +\n                    this.state.CR * (this.state.CD * this.state.atk)\n                )}\n              </h4>\n            </Col>\n          </Row>\n          <Row>\n            <Col md={8}>\n              <h3>Total E Damage (Non Crit)</h3>\n              <h4>\n                {Math.round(\n                  this.state.eSM\n                    .map(x => x * this.state.atk)\n                    .reduce((a, b) => a + b, 0)\n                )}\n              </h4>\n            </Col>\n            <Col md={8}>\n              <h3>Total E Damage (Crit)</h3>\n              <h4>\n                {Math.round(\n                  this.state.eSM\n                    .map(x => x * this.state.atk * this.state.CD)\n                    .reduce((a, b) => a + b, 0)\n                )}\n              </h4>\n            </Col>\n            <Col md={8}>\n              <h3>Expected E Damage</h3>\n              <h4>\n                {Math.round(\n                  this.state.eSM\n                    .map(\n                      x =>\n                        x * this.state.atk * (1 - this.state.CR) +\n                        this.state.CR * this.state.CD * this.state.atk * x\n                    )\n                    .reduce((a, b) => a + b, 0)\n                )}\n              </h4>\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nfunction Atkslider(props) {\n  const [atkvalue, setatkValue] = React.useState(0);\n  return (\n    <Row>\n      <Col md={15}>\n        <Slider\n          progress\n          min={0}\n          max={props.max}\n          style={{ margin: 20 }}\n          value={atkvalue}\n          onChange={atkvalue => {\n            setatkValue(atkvalue);\n            props.calcThis(atkvalue);\n          }}\n        />\n      </Col>\n      <Col md={4}>\n        <InputNumber\n          min={0}\n          max={props.max}\n          value={atkvalue}\n          onChange={atkvalue => {\n            setatkValue(atkvalue);\n            props.calcThis(atkvalue);\n          }}\n        />\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"rsuite/dist/styles/rsuite-default.css\";\nimport {\n  Slider,\n  RangeSlider,\n  Grid,\n  Row,\n  Col,\n  Container,\n  Header,\n  Content,\n  InputNumber\n} from \"rsuite\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// function Atkslider(props) {\n//   const [atkvalue, setatkValue] = React.useState(0);\n//   return (\n//     <Row>\n//       <Col md={10}>\n//         <Slider\n//           progress\n//           style={{ marginTop: 16 }}\n//           value={atkvalue}\n//           onChange={atkvalue => {\n//             setatkValue(atkvalue);\n//           }}\n//         />\n//       </Col>\n//       <Col md={4}>\n//         <InputNumber\n//           min={0}\n//           max={100}\n//           value={atkvalue}\n//           onChange={atkvalue => {\n//             setatkValue(atkvalue);\n//           }}\n//         />\n//       </Col>\n//     </Row>\n//   );\n// }\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}